package net.didorenko.tree;import net.didorenko.general.Rule;import java.util.ArrayList;import java.util.List;/** * package: net.didorenko.exception * project: coursework * class: * * @author: Grigoriy Didorenko * @date: 18.12.2015 */public class Node<T> {    private T data;    private Node<T> parent;    private List<Node<T>> children = new ArrayList<>();    public Node(T data) {        this.data = data;    }    public void addChild(Node<T> child) {        children.add(child);    }    public T getData() {        return data;    }    public Node<T> getParent() {        return parent;    }    public void setParent(Node<T> parent) {        this.parent = parent;    }    public List<Node<T>> getChildren() {        return children;    }    public Node<T> getChildAt(int index) {        return children.get(index);    }    public void display(boolean withNonTerminals) {        print("", true, withNonTerminals);    }    private void print(String prefix, boolean isTail, boolean withNonTerminals) {        Rule.Term term = (Rule.Term) data;        if (withNonTerminals) System.out.println(prefix + (isTail ? "^--- " : "|--- ") + term.getString());        else            System.out.println(prefix + (isTail ? "^--- " : "|--- ") + (term.isTerminalOrReserved() ? term.smartGetString() : ""));        for (int i = 0; i < children.size() - 1; i++) {            children.get(i).print(prefix + (isTail ? "    " : "|   "), false, withNonTerminals);        }        if (children.size() > 0) {            children.get(children.size() - 1).print(prefix + (isTail ? "    " : "|   "), true, withNonTerminals);        }    }    @Override    public String toString() {        return "data= " + data;    }}